/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockFollowModule,
  MockFollowModuleInterface,
} from "../MockFollowModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "profileId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "followNFTTokenId",
        type: "uint256",
      },
    ],
    name: "followModuleTransferHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "profileId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initializeFollowModule",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "profileId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "follower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "followNFTTokenId",
        type: "uint256",
      },
    ],
    name: "isFollowing",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "follower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "profileId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "processFollow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610360806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630e096ae1146100515780633cb22cc414610067578063451c3d0c146100755780639713958a146100a1575b600080fd5b61006561005f36600461019f565b50505050565b005b61006561005f3660046101f8565b61008c61008336600461023c565b60019392505050565b60405190151581526020015b60405180910390f35b6100b46100af366004610271565b6100c1565b60405161009891906102bc565b606060006100d183850185610311565b9050806001146101235760405162461bcd60e51b8152602060048201526019602482015278135bd8dad19bdb1b1bddd35bd91d5b194e881a5b9d985b1a59603a1b604482015260640160405180910390fd5b50506040805160008152602081019091529392505050565b80356001600160a01b038116811461015257600080fd5b919050565b60008083601f84011261016957600080fd5b5081356001600160401b0381111561018057600080fd5b60208301915083602082850101111561019857600080fd5b9250929050565b600080600080606085870312156101b557600080fd5b6101be8561013b565b93506020850135925060408501356001600160401b038111156101e057600080fd5b6101ec87828801610157565b95989497509550505050565b6000806000806080858703121561020e57600080fd5b8435935061021e6020860161013b565b925061022c6040860161013b565b9396929550929360600135925050565b60008060006060848603121561025157600080fd5b833592506102616020850161013b565b9150604084013590509250925092565b60008060006040848603121561028657600080fd5b8335925060208401356001600160401b038111156102a357600080fd5b6102af86828701610157565b9497909650939450505050565b600060208083528351808285015260005b818110156102e9578581018301518582016040015282016102cd565b818111156102fb576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561032357600080fd5b503591905056fea26469706673582212204c3c67cc45804895cdb72f92dc1a89773f9e8b91d085bd41e36fd2060c8781d664736f6c634300080a0033";

type MockFollowModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFollowModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFollowModule__factory extends ContractFactory {
  constructor(...args: MockFollowModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockFollowModule";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFollowModule> {
    return super.deploy(overrides || {}) as Promise<MockFollowModule>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockFollowModule {
    return super.attach(address) as MockFollowModule;
  }
  connect(signer: Signer): MockFollowModule__factory {
    return super.connect(signer) as MockFollowModule__factory;
  }
  static readonly contractName: "MockFollowModule";
  public readonly contractName: "MockFollowModule";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFollowModuleInterface {
    return new utils.Interface(_abi) as MockFollowModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFollowModule {
    return new Contract(address, _abi, signerOrProvider) as MockFollowModule;
  }
}
